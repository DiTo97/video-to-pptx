import os
import random
import typing
from dataclasses import dataclass

import validators
from pytube import Stream, StreamQuery, YouTube

from video2pptx.base.downloader import Downloader
from video2pptx.base.video import VideoResolution
from video2pptx.youtube.caption import xml_caption_to_srt
from video2pptx.youtube.video import YouTubeVideoMetadata


_URL_youtube = "https://youtube.com/watch?v="


@dataclass
class YouTubeDownloader(Downloader):
    """A class that downloads YouTube videos and captions locally

    Notes
    -----
    The files are available only after being downloaded in their entirety.
    """
    use_oauth: bool = False, 
    allow_oauth_cache: bool = True

    @classmethod
    def _choose_stream(cls, streams: StreamQuery, resolution: VideoResolution) -> Stream:
        """It chooses a stream among many given the desired resolution"""
        if resolution == VideoResolution.lowest:
            return streams.get_lowest_resolution()

        if resolution == VideoResolution.highest:
            return streams.get_highest_resolution()

        if resolution != VideoResolution.random:
            stream = None

            while stream is None and resolution is not None:
                stream = streams.get_by_resolution(str(resolution))

                # It traverses the resolution hierarchy
                resolution = resolution.prev

            if stream is not None:
                return stream

        n_streams = streams.count
        idx = random.randint(0, n_streams - 1)

        return streams.all()[idx]
    
    def _download_caption(
        self, youtube: YouTube, output_dirpath: str, lang_code: str = "en"
        ) -> typing.Optional[str]:
        """It downloads the caption of a YouTube video in the given language to the given dirpath
        
        Returns
        -------
        The filepath to the saved caption or None

        Notes
        -----
        - The filename is the same as the video's with .srt extension.
        """
        caption_str = None
        caption_filepath = None

        # The captions that have automatically generated by YouTube 
        # are prepended by an 'a.' prefix in the lang code
        for code in [lang_code, f"a.{lang_code}"]:
            caption = youtube.captions.get(code)

            if caption is not None:
                try:
                    caption_str = caption.generate_srt_captions()
                except KeyError:
                    caption_str = caption.xml_captions
                    caption_str = xml_caption_to_srt(caption_str)

                caption_filename = f"{youtube.title}.srt"
                caption_filepath = os.path.join(output_dirpath, caption_filename)

                with open(caption_filepath, "wt") as f:
                    f.write(caption_str)

                break

        return caption_filepath

    def _download_video(
        self, 
        url: str, 
        output_dirpath: str, 
        filename: typing.Optional[str] = None,
        file_extension: str = "mp4",
        resolution: VideoResolution = VideoResolution.highest
    ) -> typing.Tuple[str, YouTube]:
        """It downloads the YouTube video at the given URL to the given dirpath

        Returns
        -------
        The filepath to the saved video and Pytube core object

        Notes
        -----
        - The filename defaults to the slugified title of the video.
        """
        youtube = YouTube(
            url,
            proxies=self.proxies,
            use_oauth=self.use_oauth,
            allow_oauth_cache=self.allow_oauth_cache
        )

        youtube.check_availability()

        streams = youtube.streams.filter(file_extension=file_extension)
        stream  = self._choose_stream(streams, resolution)

        filename = f"{stream.title}.{file_extension}"
        filepath = stream.download(output_dirpath, filename)

        return filepath, youtube

    def download(
        self,
        vid_or_url: str,
        output_dirpath: str, 
        lang_code: str = "en",
        filename: typing.Optional[str] = None,
        file_extension: str = "mp4",
        resolution: VideoResolution = VideoResolution.highest
    ) -> YouTubeVideoMetadata:
        """It downloads tthe YouTube video with the given video Id, 
        or at the given URL, and its caption to the given dirpath

        Returns
        -------
        The downloaded video metadata

        Notes
        -----
        - The network call may use proxy servers to hide the IP address.
        - The network call may be OAuth cached
        """
        url = vid_or_url

        if not validators.url(url):
            # video Id to URL
            url = _URL_youtube + url

        if not url.startswith(_URL_youtube):
            raise ValueError("The URL does not point to a valid YouTube video")

        filepath, youtube = self._download_video(
            url, output_dirpath, filename, file_extension, resolution
        )

        caption_filepath = self._download_caption(youtube, output_dirpath, lang_code)

        publish_datetime = youtube.publish_date
        duration = float(youtube.length)

        return YouTubeVideoMetadata(
            filepath, 
            caption_filepath, 
            duration, 
            youtube.author, 
            youtube.description, 
            youtube.keywords, 
            publish_datetime, 
            youtube.rating, 
            youtube.title, 
            youtube.views
        )
