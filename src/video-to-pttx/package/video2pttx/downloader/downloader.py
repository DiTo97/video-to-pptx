import os
import random
import typing

import validators
from pytube import Stream, StreamQuery, YouTube

from video2pttx.video.caption import xml_caption_to_srt
from video2pttx.video.video import VideoResolution, VideoMetadata


_URL_youtube = "http://youtube.com/watch?v={}"


def _choose_stream(streams: StreamQuery, resolution: VideoResolution) -> Stream:
    """It choose a stream among many given the desired resolution"""
    if resolution == VideoResolution.lowest:
        return streams.get_lowest_resolution()

    if resolution == VideoResolution.highest:
        return streams.get_highest_resolution()

    n_streams = streams.count
    idx = random.randint(0, n_streams - 1)

    return streams.all()[idx]


def _download_caption(
    youtube: YouTube, output_dirpath: str, lang_code: str = "en"
) -> typing.Optional[str]:
    """It downloads the caption of a YouTube video in the given language to the given dirpath
    
    Returns
    -------
    The filepath to the saved caption or None
    """
    caption_str = None
    caption_filepath = None

    # The captions that have automatically generated by YouTube 
    # are prepended by an 'a.' prefix in the lang code
    for code in [lang_code, f"a.{lang_code}"]:
        caption = youtube.captions.get(code)

        if caption is not None:
            try:
                caption_str = caption.generate_srt_captions()
            except KeyError:
                caption_str = caption.xml_captions
                caption_str = xml_caption_to_srt(caption_str)

            caption_filename = f"{youtube.title}.srt"
            caption_filepath = os.path.join(output_dirpath, caption_filename)

            with open(caption_filepath, "wt") as f:
                f.write(caption_str)

            break

    return caption_filepath


def download(
    vid_or_url: str,
    output_dirpath: str, 
    proxies: typing.Dict[str, str] = None, 
    use_oauth: bool = False, 
    allow_oauth_cache: bool = True,
    file_extension: str = "mp4",
    lang_code: str = "en",
    resolution: VideoResolution = VideoResolution.highest
) -> VideoMetadata:
    """It downloads the YouTube video at the given URL to the given dirpath
    
    The filename defaults to the YouTube video's title.

    The caption will be saved in the same folder with the .srt extension.
    """
    if proxies is None:
        proxies = {}

    url = vid_or_url

    if not validators.url(url):
        url = _URL_youtube.format(url)

    youtube = YouTube(
        url,
        proxies=proxies,
        use_oauth=use_oauth,
        allow_oauth_cache=allow_oauth_cache
    )

    youtube.check_availability()

    streams = youtube.streams.filter(file_extension=file_extension)
    stream  = _choose_stream(streams, resolution)

    filename = f"{stream.title}.{file_extension}"
    filepath = stream.download(output_dirpath, filename)

    caption_filepath = _download_caption(youtube, output_dirpath, lang_code)

    return VideoMetadata(
        youtube.author,
        youtube.description,
        filepath,
        caption_filepath,
        youtube.keywords,
        youtube.publish_date,
        youtube.rating,
        youtube.title,
        youtube.views
    )
