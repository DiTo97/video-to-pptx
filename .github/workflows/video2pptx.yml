name: Video2pptx

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ develop, main ]

  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  bag_dir: src/${{ github.event.repository.name }}
  py_version: '3.8.15'

jobs:
  pack:
    runs-on: ubuntu-latest
    
    steps:
      - name: Python - setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.py_version }}

      - name: Python - install dependencies
        run: pip install --upgrade pip requests travel

      - name: Git - checkout
        uses: actions/checkout@v3

        # TODO: tag.py failures into 0.0.0
      - id: git-next-tag
        name: Git - next tag
        run: echo "next=$( python devops/workflows/git/tag.py ${{ github.repository }} ${{ github.head_ref }} )" >> $GITHUB_OUTPUT

      - name: Git - replace tag
        run: python devops/workflows/commons/replace.py ${{ env.bag_dir }}/package/setup.py version=.+, version=\"${{ steps.git-next-tag.outputs.next }}\",

      - name: Travel - config
        run: travel config add python ${{ env.py_version }} /usr/bin/python3

      - name: Travel - pack
        run: |
          cd ${{ env.bag_dir }}
          travel pack --no-setup sdist
          cp -r build/package/dist ${{ github.workspace }}

      - name: Git - upload dist
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist
          if-no-files-found: error

    outputs:
      version: ${{ steps.git-next-tag.outputs.next }}

  test-unit:
    needs: pack

    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        python: [ '3.8', '3.9', '3.10' ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Python - setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Git - download dist
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ${{ github.workspace }}/dist

      - name: Python - install dependencies
        run: pip install --upgrade pip pytest
          
      - name: Python - install package
        run: pip install dist/$( ls dist )

      - name: Git - checkout
        uses: actions/checkout@v3

      - name: Python - test
        run: |
          cd ${{ env.bag_dir }}
          pytest tests -m "unit"

  test-integration:
    if: ${{ github.base_ref == 'master' && ( startsWith(github.head_ref, 'release/major/') || startsWith(github.head_ref, 'release/minor/') || startsWith(github.head_ref, 'release/patch/') ) }}
    needs: test-unit

    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        python: [ '3.8', '3.9', '3.10' ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Python - setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Git - download dist
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ${{ github.workspace }}/dist

      - name: Python - install dependencies
        run: pip install --upgrade pip pytest
          
      - name: Python - install package
        run: pip install dist/$( ls dist )

      - name: Git - checkout
        uses: actions/checkout@v3

      - name: Python - test
        run: |
          cd ${{ env.bag_dir }}
          pytest tests -m "integration"

  test-e2e:
    needs: test-integration

    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        python: [ '3.8', '3.9', '3.10' ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Python - setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Git - download dist
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ${{ github.workspace }}/dist

      - name: Python - install dependencies
        run: pip install --upgrade pip pytest
          
      - name: Python - install package
        run: pip install dist/$( ls dist )

      - name: Git - checkout
        uses: actions/checkout@v3

      - name: Python - test
        run: |
          cd ${{ env.bag_dir }}
          pytest tests -m "e2e"

  push:
    needs: test-e2e
    runs-on: ubuntu-latest

    steps:
      - name: Python - setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.py_version }}

      - name: Git - checkout from PR
        uses: actions/checkout@v3
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Git - checkout from branch
        uses: actions/checkout@v3
        if: github.event_name != 'pull_request'

      - name: Git - config
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email actions@users.noreply.github.com
      
      - name: Git - tag
        run: |
          git tag ${{ needs.pack.outputs.version }}
          git push --tags

  release:
    environment: prod-pypi
    needs: push
    runs-on: ubuntu-latest

    steps:
      - name: Python - setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.py_version }}

      - name: Git - download dist
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ${{ github.workspace }}/dist

      - name: PyPI - release
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PyPI_API_token }}
